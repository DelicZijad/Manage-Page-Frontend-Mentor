 @use "sass:map";
$BrightRed: hsl(12, 88%, 59%);
$DarkBlue: hsl(228, 39%, 23%);
$DarkGrayishBlue: hsl(227, 12%, 61%);
$VeryDarkBlue: hsl(233, 12%, 13%);
$VeryPaleRed: hsl(13, 100%, 96%);
$VeryLightGray: hsl(0, 0%, 98%);

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: 'Be Vietnam Pro', sans-serif;
    transition: all 250ms;
}

//mixins
@mixin flex($direction, $justify: center, $align: center) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

;

@mixin desktop {
    @media screen and (min-width:1024px) {
        @content;
    }
}

;

$font-weights: (
    "regular": 400,
    "medium": 500,
    "bold": 700
);

@each $name,
$weight in $font-weights {
    .fw-#{$name} {
        font-weight: $weight;
    }
}

$font-sizes: (
    '100':0.75rem,
    '150':0.8rem,
    '200':0.875rem,
    '300':1rem,
    '400':1.75rem,
    '500':2rem,
    '600':2.25rem,
    '700':2.5rem,
    '800':3rem
);

@each $size,
$fs in $font-sizes {
    .fs-#{$size} {
        font-size: #{$fs};
    }

    ;

}

;

.fs-body {
    font-size: map.get($font-sizes, '300');

    @include desktop {
        font-size: map.get($font-sizes, '200');
    }
}

;

.fs-heading-primary {
    font-size: map-get($map: $font-sizes, $key: '600');
    font-weight: map-get($map: $font-weights, $key: 'bold');

    @include desktop {
        font-size: map.get($font-sizes, '800');
    }
}

.fs-heading-secondary {
    font-size: map-get($map: $font-sizes, $key: '400');
    font-weight: map-get($map: $font-weights, $key: 'bold');
}

.fs-heading-tertiary {
font-size: map-get($map: $font-sizes, $key: '300');
        font-weight: map-get($map: $font-weights, $key: 'bold');
}

html:focus-within {
    scroll-behavior: smooth;
}
body {
    text-rendering: optimizeSpeed;
    min-height: 100vh;
    overflow-x: hidden;
    position: relative;

    &::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        z-index: -50;
    }

    &.blurred {
        &::before {
            z-index: -1;
            background-color: rgba(0, 0, 0, 0.1);

            @include desktop {
                z-index: -50;
                background-color: transparent;
            }
        }
    }

}

main {
    height: 100%;
    position: relative;
}

.container {
    width: 90%;
    margin-inline: auto;

    @include desktop {
        width: 75%;
    }
}

a {
    display: block;
    text-decoration: none;
    color: inherit;
    font-size: inherit;
    font-weight: inherit;

    &:hover,
    &:focus {
        cursor: pointer;
    }
}

h1,
h2,
h3 {
    color: $DarkBlue;
    text-align: center;
}

.txt {
    color: $DarkGrayishBlue;
    text-align: center;
    line-height: 1.5;
}

.hide {
    display: none !important;
}

button {
    display: block;
    border: none;
    outline: none;
    cursor: pointer;
    box-shadow: 0px 5px 7px lighten($color: $BrightRed, $amount: 25%);
    background-color: transparent;
}

img {
    height: 100%;
    width: 100%;
}

.btn {
    padding: 0.75rem 1.25rem;
    border-radius: 40px;
    background-color: $BrightRed;
    color: $VeryLightGray;
    font-weight: 500;
    font-size: 1rem;

    &:hover {
        background-color: lighten($color: $BrightRed, $amount: 10%);
    }
}

.bgTop {
    position: absolute;
    top: -130px;
    right: -130px;
    z-index: -15 !important;
    height: 450px;
    width: 450px;

    @include desktop {
        top: -180px;
        right: -80px;
        height: 650px;
        width: 650px;
    }
}
